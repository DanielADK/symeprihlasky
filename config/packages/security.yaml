security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        users:
            entity:
                class: 'App\Entity\Person'
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            provider: users
            entry_point: App\Security\AuthenticationEntryPoint
            form_login:
                login_path: login
                check_path: login
                default_target_path: admin_home
                enable_csrf: true
            logout:
                path: logout
            remember_me:
                secret: "%kernel.secret%"
                lifetime: 604800 # One week

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Role hierarchy
    # {VIEW,ADD,EDIT,DELETE}_{PERSON,PARENT,CHILD,EVENT,APPLICATION,LEADER,INSTRUCTOR}
    # {VIEW,ADD,EDIT,DELETE}_OWN_{PERSON,CHILD,APPLICATION}
    # VIEW_LOGS
    # {VIEW,SEND}_NEWSLETTER
    role_hierarchy:
        ROLE_ADMIN: ROLE_LEADER, ROLE_INSTRUCTOR
            ROLE_ADD_PERSON, ROLE_EDIT_PERSON, ROLE_DELETE_PERSON,
            ROLE_ADD_PARENT, ROLE_EDIT_PARENT, ROLE_DELETE_PARENT,
            ROLE_ADD_CHILD, ROLE_EDIT_CHILD, ROLE_DELETE_CHILD,
            ROLE_ADD_EVENT, ROLE_EDIT_EVENT, ROLE_DELETE_EVENT,
            ROLE_ADD_APPLICATION, ROLE_EDIT_APPLICATION, ROLE_DELETE_APPLICATION
            ROLE_ADD_LEADER, ROLE_EDIT_LEADER, ROLE_DELETE_LEADER,
            ROLE_ADD_INSTRUCTOR, ROLE_EDIT_INSTRUCTOR, ROLE_DELETE_INSTRUCTOR,
            ROLE_SEND_NEWSLETTER,
            ROLE_VIEW_LOGS
        ROLE_LEADER: ROLE_INSTRUCTOR,  
            ROLE_VIEW_PERSON, 
            ROLE_VIEW_PARENT, 
            ROLE_VIEW_CHILD,
            ROLE_VIEW_LEADER,
            ROLE_VIEW_INSTRUCTOR,
            ROLE_VIEW_NEWSLETTER
        ROLE_INSTRUCTOR: ROLE_VIEW_OWN_APPLICATION, ROLE_ADD_OWN_APPLICATION, ROLE_EDIT_OWN_APPLICATION, ROLE_DELETE_OWN_APPLICATION,
            ROLE_VIEW_OWN_PERSON, ROLE_EDIT_OWN_PERSON,
            ROLE_VIEW_APPLICATION,
            ROLE_VIEW_EVENT
        ROLE_PARENT: ROLE_VIEW_OWN_CHILD, ROLE_ADD_OWN_CHILD, ROLE_EDIT_OWN_CHILD, ROLE_DELETE_OWN_CHILD,
            ROLE_VIEW_OWN_PERSON, ROLE_EDIT_OWN_PERSON,
            ROLE_VIEW_EVENT
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/tabornik, roles: [ROLE_INSTRUCTOR, ROLE_PARENT] }
        - { path: ^/api, roles: [ROLE_PARENT, ROLE_ADMIN] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
